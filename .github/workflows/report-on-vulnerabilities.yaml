name: report-on-vulnerabilities

permissions: {}

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 6 * * *"
  # push:
  #   branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  scan:
    runs-on: ubuntu-latest
    outputs:
      results: ${{ steps.parse-results.outputs.results }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.30.0 (Trivy v0.34.0)
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: json
          ignore-unfixed: false
          severity: HIGH,CRITICAL
          output: scan.json

      - name: Parse scan results
        id: parse-results
        continue-on-error: true
        run: |
          VULNS=$(cat scan.json | jq '.Results[] | length')
          if [[ $VULNS -eq 0 ]]
          then
            echo "No vulnerabilities found, halting"
            echo "results=nothing" >> $GITHUB_OUTPUT
          else
            echo "Vulnerabilities found, creating issue"
            echo "results=found" >> $GITHUB_OUTPUT
          fi

      - name: Upload vulnerability scan report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: steps.parse-results.outputs.results == 'found'
        with:
          name: scan.json
          path: scan.json
          if-no-files-found: error

  open-issue:
    runs-on: ubuntu-latest
    if: needs.scan.outputs.results == 'found'
    needs: scan
    permissions:
      issues: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Download scan
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6.0.0
        with:
          name: scan.json
      - name: Set scan output
        id: set-scan-output
        run: echo "results=$(cat scan.json | jq -c)" >> $GITHUB_OUTPUT
      # - uses: JasonEtco/create-an-issue@e27dddc79c92bc6e4562f268fffa5ed752639abd # v2.9.1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     RESULTS: ${{ steps.set-scan-output.outputs.results }}
      #   with:
      #     filename: .github/ISSUE_TEMPLATE/VULN-TEMPLATE.md
